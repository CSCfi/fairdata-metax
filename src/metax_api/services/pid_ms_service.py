import logging
import requests
from requests.auth import HTTPBasicAuth

from django.conf import settings
from rest_framework.exceptions import APIException

from metax_api.models.common import Common
from metax_api.utils import (
    get_identifier_type,
    get_tz_aware_now_without_micros,
    IdentifierType,
    is_metax_generated_doi_identifier,
    is_metax_generated_urn_identifier,
)

_logger = logging.getLogger(__name__)


class PIDMSService:
    def __init__(self):
        if not hasattr(settings, "PID_MS"):
            raise Exception("Missing configuration from settings.py: PID_MS")

        if hasattr(settings, "DATACITE"):
            if not settings.DATACITE.get("ETSIN_URL_TEMPLATE", None):
                raise Exception(
                    "Missing configuration from settings for DATACITE: ETSIN_URL_TEMPLATE"
                )
        else:
            raise Exception("Missing configuration from settings: DATACITE")

        self.PIDMSUrl = f"{settings.PID_MS['PROTOCOL']}://{settings.PID_MS['HOST']}"
        self.pid_ms_apikey = settings.PID_MS["TOKEN"]
        self.catalogs_to_migrate = settings.PID_MS["CATALOGS_TO_MIGRATE"]
        self.etsin_url = settings.DATACITE["ETSIN_URL_TEMPLATE"]

        self.headers = {"apikey": self.pid_ms_apikey}

    def get_url_with_pid(self, cr):
        dataset_id = cr.identifier
        dataset_pid = cr.research_dataset["preferred_identifier"]
        if get_identifier_type(dataset_pid) == IdentifierType.DOI:
            dataset_pid = dataset_pid.replace("doi:", "")

        try:
            response = requests.get(
                f"{self.PIDMSUrl}/get/v1/pid/{dataset_pid}", headers=self.headers
            )
            response.raise_for_status()
            return response.text
        except Exception as e:
            error_msg = f"Exception in PIDMSClient: {e}"
            _logger.error(error_msg)
            raise ServiceUnavailableError(error_msg)

    def insert_pid(self, cr):
        dataset_id = cr.identifier
        dataset_pid = cr.research_dataset["preferred_identifier"]

        if cr.data_catalog.catalog_json["identifier"] not in self.catalogs_to_migrate:
            raise ValueError(
                f"Not inserting PID to PID-MS. CatalogRecord {dataset_id} is in catalog {cr.data_catalog.catalog_json['identifier']}."
                f" Only catalog records in the following catalogs {self.catalogs_to_migrate} are inserted to PID-MS"
            )

        if cr.state != cr.STATE_PUBLISHED:
            raise ValueError(
                f"Not inserting PID to PID-MS. CatalogRecord {dataset_id} state is {cr.state}."
                f" Only catalog records in state {cr.STATE_PUBLISHED} are inserted to PID-MS"
            )

        if get_identifier_type(dataset_pid) == IdentifierType.DOI:
            if is_metax_generated_doi_identifier(dataset_pid) == False:
                raise ValueError(
                    f"Not inserting PID to PID-MS. CatalogRecord {dataset_id} PID is {dataset_pid}."
                    f" Only PIDs generated by Metax are inserted to PID-MS"
                )
            dataset_pid = dataset_pid.replace("doi:", "")

        elif is_metax_generated_urn_identifier(dataset_pid) == False:
            raise ValueError(
                f"Not inserting PID to PID-MS. CatalogRecord {dataset_id} PID is {dataset_pid}."
                f" Only PIDs generated by Metax are inserted to PID-MS"
            )

        if cr.api_meta["version"] > 2:
            raise ValueError(
                f"Not inserting PID to PID-MS. CatalogRecord {dataset_id} api_version is {cr.api_meta['version']}."
                f" Only catalog records with api_version 1 or 2 are inserted to PID-MS"
            )

        payload = {
            "URL": self.etsin_url % dataset_id,
        }

        try:
            _logger.info(f"Inserting PID {dataset_pid} to PID-MS")
            response = requests.post(
                f"{self.PIDMSUrl}/v1/pid/{dataset_pid}", json=payload, headers=self.headers
            )
            response.raise_for_status()
            cr.pid_migrated = get_tz_aware_now_without_micros()
            super(Common, cr).save(update_fields=["pid_migrated"])
            return response.text
        except Exception as e:
            error_msg = f"Exception in PIDMSClient: {e}"
            _logger.error(error_msg)
            raise ServiceUnavailableError(error_msg)


class ServiceUnavailableError(APIException):
    status_code = 503
    default_detail = "Service temporarily unavailable, try again later."
    default_code = "service_unavailable"
