# Generated by Django 2.0 on 2018-06-06 14:01

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MetaxUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AlternateRecordSet',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='CatalogRecord',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True)),
                ('removed', models.BooleanField(default=False)),
                ('date_modified', models.DateTimeField(null=True)),
                ('user_modified', models.CharField(max_length=200, null=True)),
                ('date_created', models.DateTimeField()),
                ('user_created', models.CharField(max_length=200, null=True)),
                ('service_modified', models.CharField(help_text='Name of the service who last modified the record', max_length=200, null=True)),
                ('service_created', models.CharField(help_text='Name of the service who created the record', max_length=200)),
                ('dataset_group_edit', models.CharField(blank=True, help_text='Group which is allowed to edit the dataset in this catalog record.', max_length=200, null=True)),
                ('deprecated', models.BooleanField(default=False, help_text='Is True when files attached to a dataset have been deleted in IDA.')),
                ('_directory_data', django.contrib.postgres.fields.jsonb.JSONField(help_text='Stores directory data related to browsing files and directories', null=True)),
                ('identifier', models.CharField(max_length=200, unique=True)),
                ('mets_object_identifier', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), null=True, size=None)),
                ('metadata_owner_org', models.CharField(help_text='Actually non-nullable, but is derived from field metadata_provider_org if omitted.', max_length=200, null=True)),
                ('metadata_provider_org', models.CharField(help_text='Non-modifiable after creation', max_length=200)),
                ('metadata_provider_user', models.CharField(help_text='Non-modifiable after creation', max_length=200)),
                ('editor', django.contrib.postgres.fields.jsonb.JSONField(help_text='Editor specific fields, such as owner_id, modified, record_identifier', null=True)),
                ('preservation_description', models.CharField(blank=True, help_text='Reason for accepting or rejecting PAS proposal.', max_length=200, null=True)),
                ('preservation_reason_description', models.CharField(blank=True, help_text='Reason for PAS proposal from the user.', max_length=200, null=True)),
                ('preservation_state', models.IntegerField(choices=[(0, 'Initialized'), (10, 'Proposed for digital preservation'), (20, 'Technical metadata generated'), (30, 'Technical metadata generation failed'), (40, 'Invalid metadata'), (50, 'Metadata validation failed'), (60, 'Validated metadata updated'), (70, 'Valid metadata'), (80, 'Accepted to digital preservation'), (90, 'in packaging service'), (100, 'Packaging failed'), (110, 'SIP sent to ingestion in digital preservation service'), (120, 'in digital preservation'), (130, 'Rejected in digital preservation service'), (140, 'in dissemination')], default=0, help_text='Record state in PAS.')),
                ('preservation_state_modified', models.DateTimeField(help_text='Date of last preservation state change.', null=True)),
                ('research_dataset', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True)),
                ('removed', models.BooleanField(default=False)),
                ('date_modified', models.DateTimeField(null=True)),
                ('user_modified', models.CharField(max_length=200, null=True)),
                ('date_created', models.DateTimeField()),
                ('user_created', models.CharField(max_length=200, null=True)),
                ('service_modified', models.CharField(help_text='Name of the service who last modified the record', max_length=200, null=True)),
                ('service_created', models.CharField(help_text='Name of the service who created the record', max_length=200)),
                ('contract_json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataCatalog',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True)),
                ('removed', models.BooleanField(default=False)),
                ('date_modified', models.DateTimeField(null=True)),
                ('user_modified', models.CharField(max_length=200, null=True)),
                ('date_created', models.DateTimeField()),
                ('user_created', models.CharField(max_length=200, null=True)),
                ('service_modified', models.CharField(help_text='Name of the service who last modified the record', max_length=200, null=True)),
                ('service_created', models.CharField(help_text='Name of the service who created the record', max_length=200)),
                ('catalog_json', django.contrib.postgres.fields.jsonb.JSONField()),
                ('catalog_record_group_edit', models.CharField(blank=True, help_text='Group which is allowed to edit catalog records in the catalog.', max_length=200, null=True)),
                ('catalog_record_group_create', models.CharField(blank=True, help_text='Group which is allowed to add new catalog records to the catalog.', max_length=200, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DatasetVersionSet',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Directory',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True)),
                ('removed', models.BooleanField(default=False)),
                ('date_modified', models.DateTimeField(null=True)),
                ('user_modified', models.CharField(max_length=200, null=True)),
                ('date_created', models.DateTimeField()),
                ('user_created', models.CharField(max_length=200, null=True)),
                ('service_modified', models.CharField(help_text='Name of the service who last modified the record', max_length=200, null=True)),
                ('service_created', models.CharField(help_text='Name of the service who created the record', max_length=200)),
                ('byte_size', models.BigIntegerField(default=0)),
                ('directory_deleted', models.DateTimeField(null=True)),
                ('directory_modified', models.DateTimeField(auto_now=True)),
                ('directory_name', models.CharField(max_length=200)),
                ('directory_path', models.TextField()),
                ('identifier', models.CharField(max_length=200, unique=True)),
                ('file_count', models.BigIntegerField(default=0)),
                ('project_identifier', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True)),
                ('removed', models.BooleanField(default=False)),
                ('date_modified', models.DateTimeField(null=True)),
                ('user_modified', models.CharField(max_length=200, null=True)),
                ('date_created', models.DateTimeField()),
                ('user_created', models.CharField(max_length=200, null=True)),
                ('service_modified', models.CharField(help_text='Name of the service who last modified the record', max_length=200, null=True)),
                ('service_created', models.CharField(help_text='Name of the service who created the record', max_length=200)),
                ('byte_size', models.BigIntegerField(default=0)),
                ('checksum_algorithm', models.CharField(max_length=200)),
                ('checksum_checked', models.DateTimeField()),
                ('checksum_value', models.TextField()),
                ('file_characteristics', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('file_characteristics_extension', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('file_deleted', models.DateTimeField(null=True)),
                ('file_frozen', models.DateTimeField()),
                ('file_format', models.CharField(max_length=200, null=True)),
                ('file_modified', models.DateTimeField(auto_now=True)),
                ('file_name', models.CharField(max_length=200)),
                ('file_path', models.TextField()),
                ('file_uploaded', models.DateTimeField()),
                ('identifier', models.CharField(max_length=200)),
                ('open_access', models.BooleanField(default=False)),
                ('project_identifier', models.CharField(max_length=200)),
                ('replication_path', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FileStorage',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True)),
                ('removed', models.BooleanField(default=False)),
                ('date_modified', models.DateTimeField(null=True)),
                ('user_modified', models.CharField(max_length=200, null=True)),
                ('date_created', models.DateTimeField()),
                ('user_created', models.CharField(max_length=200, null=True)),
                ('service_modified', models.CharField(help_text='Name of the service who last modified the record', max_length=200, null=True)),
                ('service_created', models.CharField(help_text='Name of the service who created the record', max_length=200)),
                ('file_storage_json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResearchDatasetVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField()),
                ('stored_to_pas', models.DateTimeField(null=True)),
                ('metadata_version_identifier', models.CharField(max_length=200, unique=True)),
                ('preferred_identifier', models.CharField(max_length=200)),
                ('research_dataset', django.contrib.postgres.fields.jsonb.JSONField()),
                ('catalog_record', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='research_dataset_versions', to='metax_api.CatalogRecord')),
            ],
        ),
        migrations.CreateModel(
            name='XmlMetadata',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True)),
                ('removed', models.BooleanField(default=False)),
                ('date_modified', models.DateTimeField(null=True)),
                ('user_modified', models.CharField(max_length=200, null=True)),
                ('date_created', models.DateTimeField()),
                ('user_created', models.CharField(max_length=200, null=True)),
                ('service_modified', models.CharField(help_text='Name of the service who last modified the record', max_length=200, null=True)),
                ('service_created', models.CharField(help_text='Name of the service who created the record', max_length=200)),
                ('namespace', models.CharField(max_length=200)),
                ('xml', models.TextField()),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='metax_api.File')),
            ],
        ),
        migrations.AddIndex(
            model_name='filestorage',
            index=models.Index(fields=['active'], name='metax_api_f_active_ca14ef_idx'),
        ),
        migrations.AddIndex(
            model_name='filestorage',
            index=models.Index(fields=['removed'], name='metax_api_f_removed_c201e1_idx'),
        ),
        migrations.AddField(
            model_name='file',
            name='file_storage',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='metax_api.FileStorage'),
        ),
        migrations.AddField(
            model_name='file',
            name='parent_directory',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='files', to='metax_api.Directory'),
        ),
        migrations.AddField(
            model_name='directory',
            name='parent_directory',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_directories', to='metax_api.Directory'),
        ),
        migrations.AddIndex(
            model_name='datacatalog',
            index=models.Index(fields=['active'], name='metax_api_d_active_158546_idx'),
        ),
        migrations.AddIndex(
            model_name='datacatalog',
            index=models.Index(fields=['removed'], name='metax_api_d_removed_ec7901_idx'),
        ),
        migrations.AddIndex(
            model_name='contract',
            index=models.Index(fields=['active'], name='metax_api_c_active_bb13e1_idx'),
        ),
        migrations.AddIndex(
            model_name='contract',
            index=models.Index(fields=['removed'], name='metax_api_c_removed_2bb816_idx'),
        ),
        migrations.AddField(
            model_name='catalogrecord',
            name='alternate_record_set',
            field=models.ForeignKey(help_text='Records which are duplicates of this record, but in another catalog.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='records', to='metax_api.AlternateRecordSet'),
        ),
        migrations.AddField(
            model_name='catalogrecord',
            name='contract',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='records', to='metax_api.Contract'),
        ),
        migrations.AddField(
            model_name='catalogrecord',
            name='data_catalog',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='records', to='metax_api.DataCatalog'),
        ),
        migrations.AddField(
            model_name='catalogrecord',
            name='dataset_version_set',
            field=models.ForeignKey(help_text='Records which are different dataset versions of each other.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='records', to='metax_api.DatasetVersionSet'),
        ),
        migrations.AddField(
            model_name='catalogrecord',
            name='files',
            field=models.ManyToManyField(to='metax_api.File'),
        ),
        migrations.AddField(
            model_name='catalogrecord',
            name='next_dataset_version',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='metax_api.CatalogRecord'),
        ),
        migrations.AddField(
            model_name='catalogrecord',
            name='previous_dataset_version',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='metax_api.CatalogRecord'),
        ),
        migrations.AddField(
            model_name='metaxuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='metaxuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='xmlmetadata',
            unique_together={('namespace', 'file')},
        ),
        migrations.AddIndex(
            model_name='researchdatasetversion',
            index=models.Index(fields=['metadata_version_identifier'], name='metax_api_r_metadat_911b4a_idx'),
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['file_path'], name='metax_api_f_file_pa_a71b21_idx'),
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['identifier'], name='metax_api_f_identif_470ca8_idx'),
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['parent_directory'], name='metax_api_f_parent__f3da18_idx'),
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['project_identifier'], name='metax_api_f_project_68a501_idx'),
        ),
        migrations.AddIndex(
            model_name='directory',
            index=models.Index(fields=['directory_path'], name='metax_api_d_directo_bbb80a_idx'),
        ),
        migrations.AddIndex(
            model_name='directory',
            index=models.Index(fields=['identifier'], name='metax_api_d_identif_3e8d23_idx'),
        ),
        migrations.AddIndex(
            model_name='directory',
            index=models.Index(fields=['parent_directory'], name='metax_api_d_parent__c7663a_idx'),
        ),
        migrations.AddIndex(
            model_name='directory',
            index=models.Index(fields=['project_identifier'], name='metax_api_d_project_f97a1c_idx'),
        ),
        migrations.AddIndex(
            model_name='catalogrecord',
            index=models.Index(fields=['data_catalog'], name='metax_api_c_data_ca_f931ef_idx'),
        ),
        migrations.AddIndex(
            model_name='catalogrecord',
            index=models.Index(fields=['identifier'], name='metax_api_c_identif_fa7e88_idx'),
        ),
    ]
