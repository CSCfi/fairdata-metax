# Generated by Django 3.1.13 on 2021-08-26 11:14

from django.db import migrations, models
import django.db.models.deletion
from django.utils import timezone
import logging
from metax_api.models import catalog_record

logger = logging.getLogger(__name__)


def add_permissions(apps, schema_editor):
    """
    Add EditorPermissions for each version set and related next_draft CatalogRecords.

    Here CatalogRecords not belonging to a DatasetVersionSet are considered a version set with size 1.
    """
    CatalogRecord = apps.get_model("metax_api", "CatalogRecordV2")
    EditorUserPermission = apps.get_model("metax_api", "EditorUserPermission")
    EditorPermissions = apps.get_model("metax_api", "EditorPermissions")

    num_perms = 0
    num_datasets = 0
    prev_version_set_id = None
    version_set_users = []
    version_set_crs = []

    def flush_version_set():
        """Create single EditorPermissions object for each version set, add creator user"""
        nonlocal num_perms, num_datasets, version_set_crs, version_set_users
        if len(version_set_crs) > 0:
            permissions = EditorPermissions.objects.create()
            permissions.catalog_records.add(*version_set_crs)
            num_perms += 1
            num_datasets += len(version_set_crs)

            for user in version_set_users:
                now = timezone.now().replace(microsecond=0)
                EditorUserPermission.objects.create(
                    editor_permissions=permissions,
                    user_id=user,
                    verified=True,
                    role="creator",
                    date_created=now,
                )
        version_set_users = []
        version_set_crs = []

    # group datasets by version_sets and include their next_draft datasets
    for cr in CatalogRecord.objects.filter(draft_of__isnull=True).order_by("dataset_version_set_id", "id"):
        if cr.dataset_version_set_id is None or cr.dataset_version_set_id != prev_version_set_id:
            flush_version_set()

        version_set_crs.append(cr)
        if cr.next_draft:
            version_set_crs.append(cr.next_draft)

        # DatasetVersionSet shouldn't have multiple metadata_provider_users but this supports them just in case
        if cr.metadata_provider_user and cr.metadata_provider_user not in version_set_users:
            version_set_users.append(cr.metadata_provider_user)

        prev_version_set_id = cr.dataset_version_set_id
    flush_version_set()

    logger.info(f"Added {num_perms} EditorPermissions to {num_datasets} datasets")

def revert(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('metax_api', '0037_auto_20210811_1037'),
    ]

    operations = [
        migrations.CreateModel(
            name='EditorPermissions',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='EditorUserPermission',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True)),
                ('removed', models.BooleanField(default=False)),
                ('date_modified', models.DateTimeField(null=True)),
                ('user_modified', models.CharField(max_length=200, null=True)),
                ('date_created', models.DateTimeField()),
                ('user_created', models.CharField(max_length=200, null=True)),
                ('service_modified', models.CharField(help_text='Name of the service who last modified the record', max_length=200, null=True)),
                ('service_created', models.CharField(help_text='Name of the service who created the record', max_length=200, null=True)),
                ('date_removed', models.DateTimeField(null=True)),
                ('user_id', models.CharField(max_length=200)),
                ('role', models.CharField(choices=[('creator', 'Creator'), ('editor', 'Editor')], max_length=16)),
                ('verified', models.BooleanField(default=False)),
                ('verification_token', models.CharField(max_length=32, null=True)),
                ('verification_token_expires', models.DateTimeField(null=True)),
                ('editor_permissions', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='metax_api.editorpermissions')),

            ],
        ),
        migrations.AddField(
            model_name='catalogrecord',
            name='editor_permissions',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='catalog_records', to='metax_api.editorpermissions'),
        ),
        migrations.AddIndex(
            model_name='editoruserpermission',
            index=models.Index(fields=['user_id'], name='metax_api_e_user_id_0b47cc_idx'),
        ),
        migrations.AddConstraint(
            model_name='editoruserpermission',
            constraint=models.UniqueConstraint(fields=('editor_permissions', 'user_id'), name='unique_dataset_user_permission'),
        ),
        migrations.AddConstraint(
            model_name='editoruserpermission',
            constraint=models.CheckConstraint(check=models.Q(_negated=True, user_id=''), name='require_user_id'),
        ),
        migrations.AddConstraint(
            model_name='editoruserpermission',
            constraint=models.CheckConstraint(check=models.Q(role__in=['creator', 'editor']), name='require_role'),
        ),
        migrations.RunPython(add_permissions, revert),
    ]
