# Generated by Django 3.1.13 on 2021-12-16 13:39

from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations

import logging

logger = logging.getLogger(__name__)

def change_aalto_catalog_harvested_value(apps, schema_editor, harvested_value = True):
    logger.info(f"Change Aalto catalog harvested value to: {harvested_value}")
    try:
        DataCatalog = apps.get_model('metax_api', 'DataCatalog')
        aalto_catalog = DataCatalog.objects.get(catalog_json__identifier = "urn:nbn:fi:att:data-catalog-acris")
        aalto_catalog.catalog_json["harvested"] = harvested_value
        aalto_catalog.save()
    except DataCatalog.DoesNotExist:
        logger.info("Aalto catalog does not exist. Passing")
        pass

def revert(apps, schema_editor):
    change_aalto_catalog_harvested_value(apps, schema_editor, harvested_value = False)



class Migration(migrations.Migration):

    dependencies = [
        ('metax_api', '0043_remove_editoruserpermission_verified'),
    ]

    operations = [
        migrations.RunPython(change_aalto_catalog_harvested_value, revert),
    ]
