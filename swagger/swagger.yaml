swagger: '2.0'
info:
  title: METAX REST API
  version: v1
host: metax.example.org
schemes:
  - https
basePath: /rest/v1/
produces:
  - application/json
paths:




# File Storage API
  /filestorages:
    get:
      summary: "list of file storage systems"
      responses:
        "200":
          description: return list of file storages
      tags:
        - File Storage API (not implemented)
    post:
      summary: create file storage system
      consumes:
        - application/json
      responses:
        '201':
          description: new file storage created, return UUID of the system
        '401':
          description: Unauthorized. Reserved for admins only
      tags:
        - File Storage API (not implemented)
  /filestorages/{PID}:
    get:
      summary: get file storage metadata
      parameters:
        - name: PID
          in: path
          description: UUID of the system
          required: true
          type: string
      responses:
        '200':
          description: return file storage metadata
        '404':
          description: not found
      tags:
        - File Storage API (not implemented)
    put:
      summary: replace File Storage metadata
      parameters:
        - name: PID
          in: path
          description: UUID of the system
          required: true
          type: string
      responses:
        '200':
          description: successful operation. modified content returned
        '400':
          description: parameters contained errors, response includes details
        '401':
          description: Unauthorized. Reserved for admins only
      tags:
        - File Storage API (not implemented)

# File API
  /files:
    get:
      summary: get list of files
      parameters:
        - name: offset
          in: query
          description: offset for paging
          required: false
          type: integer
        - name: limit
          in: query
          description: limit for paging
          required: false
          type: integer
          default: 10
      responses:
        "200":
          description: successful operation, return list of files
          schema:
            $ref: '#/definitions/File'
      tags:
        - File API
    post:
      summary: create new file metadata
      consumes:
        - application/json
      parameters:
      - in: "body"
        name: "body"
        description: "Object or a list of objects to create."
        required: true
        schema:
          $ref: '#/definitions/File'
      responses:
        '201':
          description: Returns the created object, or if a list was given, a list of objects and errors.
        '400':
          description: parameters contained errors, response includes details.
      tags:
        - File API
    put:
      summary: bulk update
      consumes:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          description: "A list of objects to update."
          required: true
      responses:
        '200':
          description: Successful operation. Return values include a list of errors, if any.
        '400':
          description: All updates failed. A list of errors is returned.
      tags:
        - File API
    patch:
      summary: bulk update partial
      description: |
        The payload must include a field that can be used to identify the resource being updated. Acceptable identifier fields are: <b>id, identifier</b>
      consumes:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          description: "A list of (partial) objects to update."
          required: true
      responses:
        '200':
          description: Some or all objects were updated. Return values contain list of full updated objects, and may include a list of errors.
        '400':
          description: All updates failed. A list of errors is returned.
      tags:
        - File API
    delete:
      summary: bulk delete
      description: Mark files as deleted en masse.
      consumes:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          description: A list of ids, or a list of identifiers.
          required: true
      responses:
        '204':
          description: Successful operation. All files were marked deleted.
        '400':
          description: All updates failed. A list of errors is returned.
      tags:
        - File API
  /files/{PID}:
    get:
      summary: get file metadata
      parameters:
        - name: PID
          in: path
          description: Persistent ID of file OR the internal pk
          required: true
          type: string
      responses:
        '200':
          description: return file metadata
          schema:
            $ref: '#/definitions/File'
        '404':
          description: not found
      tags:
        - File API
    put:
      summary: replace file metadata
      parameters:
        - name: PID
          in: path
          description: Persistent ID of file OR the internal pk
          required: true
          type: string
        - name: "body"
          in: "body"
          description: "Object to update the resource with"
          required: true
          schema:
            $ref: '#/definitions/File'
      responses:
        '200':
          description: successful operation. modified content returned
        '400':
          description: parameters contained errors, response includes details
        '404':
          description: object not found
      tags:
        - File API
    patch:
      summary: replace part of file metadata
      parameters:
        - name: PID
          in: path
          description: Persistent ID of file OR the internal pk
          required: true
          type: string
        - name: "body"
          in: "body"
          description: "(Partial) Object to update the resource with"
          required: true
          schema:
            $ref: '#/definitions/File'
      responses:
        '200':
          description: successful operation, full content returned
          schema:
            $ref: '#/definitions/File'
        '400':
          description: parameters contained errors, response includes details
        '404':
          description: object not found
      tags:
        - File API
    delete:
      summary: delete a file
      parameters:
        - name: PID
          in: path
          description: Persistent ID of file OR the internal pk
          required: true
          type: string
      responses:
        '204':
          description: successful operation, no content returned
        '404':
          description: object not found
      tags:
        - File API
  /files/{PID}/XML:
    get:
      summary: get XML metadata from file
      produces:
        - application/xml
        - application/json
      parameters:
        - name: PID
          in: path
          description: Persistent ID of file OR the internal pk
          required: true
          type: string
        - name: namespace
          in: query
          description: Namespace of the schema. If omitted, returns a list of xml metadata namespaces associated with the file.
          type: string
      responses:
        '200':
          description: single xml metadata (application/xml), or a list of namespaces (application/json)
        '404':
          description: file not found
      tags:
        - File API
    post:
      summary: create new XML metadata
      consumes:
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - name: PID
          in: path
          description: persistent ID of file OR the internal pk
          required: true
          type: string
        - name: namespace
          in: query
          description: namespace of the schema. If a xml metadata already existed with given namespace, an error is returned
          required: true
          type: string
        - name: body
          in: body
          description: The XML to create.
          required: true
      responses:
        '201':
          description: return created XML
        '400':
          description: parameters contained errors, response includes details (application/json)
      tags:
        - File API
    put:
      summary: update XML metadata
      consumes:
        - application/xml
      parameters:
        - name: PID
          in: path
          description: persistent ID of file OR the internal pk
          required: true
          type: string
        - name: namespace
          in: query
          description: namespace of the schema
          required: true
          type: string
        - name: body
          in: body
          description: "The XML to update"
          required: true
      responses:
        '204':
          description: XML saved
        '400':
          description: parameters contained errors, response includes details
        '404':
          description: file or namespace does not exist
      tags:
        - File API
    delete:
      summary: delete XML metadata
      parameters:
        - name: PID
          in: path
          description: persistent ID of file OR the internal pk
          required: true
          type: string
        - name: namespace
          in: query
          description: namespace of the schema
          required: true
          type: string
      responses:
        '204':
          description: XML is deleted
        '400':
          description: parameters contained errors, response includes details
        '404':
          description: file or namespace does not exist
      tags:
        - File API
  /files/datasets:
    post:
      summary: get datasets where files belong to
      description: |
        Note&#58; The method is invoked using POST, because there are limits to length of query
        parameters in GET. Also, some clients forcibly shove parameters in body in GET
        requests to query parameters, so using POST instead is more guaranteed to work.
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: a list of file id's (integers) or identifiers (strings).
          required: true
          type: string
      responses:
        '200':
          description: a list of urn_identifiers. if the files were not found to belong to any datasets, an empty list is returned
        '404':
          description: files given in the list not found
      tags:
        - File API
  /directories/{PID}:
    get:
      summary: get details of a directory
      description: Does not contain the directory's files and sub-directories. For that, use /directories/{PID}/files
      parameters:
        - name: PID
          in: path
          description: Persistent ID of the resource OR the internal pk
          required: true
          type: string
      responses:
        '200':
          description: return directory details
          schema:
            $ref: '#/definitions/Directory'
        '404':
          description: not found
      tags:
        - File API
    delete:
      summary: delete all files' metadata in directory, recursively
      parameters:
        - name: PID
          in: path
          description: |
              directory path. example value\: /path/of/directory
          required: true
          type: string
      responses:
        '200':
          description: successful operation, returns in body the number of affected files in field affected_files
        '400':
          description: bad parameters, details in body
        '404':
          description: not a single file with given path was found
      tags:
        - File API (not implemented)
  /directories/{PID}/files:
    get:
      summary: get list of files and directories contained by a directory
      parameters:
        - name: PID
          in: path
          description: persistent ID of the directory OR the internal pk
          required: true
          type: string
        - name: recursive
          in: query
          description: return a flat list of file objects contained by the target directory and its sub-directories
          required: false
          type: boolean
        - name: urn_identifier
          in: query
          description: urn_identifier of a dataset. browse only files that have been selected for that record.
          required: false
          type: string
      responses:
        '200':
          description: |
            returns a dict like { 'directories'&#58; [], 'files'&#58; [] }, where the lists contain directory and file objects.
            note&#58; if parameter 'recursive' is used, return value is a flat list of file objects instead.
        '404':
          description: directory not found
      tags:
        - File API
  /directories/files:
    get:
      summary: get list of files and directories contained by a directory, queried by dir path and project
      description: |
        functions the same as /directories/pid, except queried by dir path and project identifier, instead of directly by directory identifier.
      parameters:
        - name: path
          in: path
          description: path of the directory to browse
          required: true
          type: string
        - name: project
          in: query
          description: project_identifier of the project to browse from
          required: true
          type: string
        - name: recursive
          in: query
          description: return a flat list of file objects contained by the target directory and its sub-directories
          required: false
          type: boolean
        - name: urn_identifier
          in: query
          description: urn_identifier of a dataset. browse only files that have been selected for that record.
          required: false
          type: string
      responses:
        '200':
          description: |
            returns a dict like { 'directories'&#58; [], 'files'&#58; [] }, where the lists contain directory and file objects.
            note&#58; if parameter 'recursive' is used, return value is a flat list of file objects instead.
        '404':
          description: directory not found
      tags:
        - File API
  /directories/root:
    get:
      summary: return root directory for a project, and its files and directories
      description: Useful when starting to browse files for a project, when individual root-level directory identifier is not yet known.
      parameters:
        - name: project
          in: query
          description: project_identifier of the project for which to find root directory
          required: true
          type: string
      responses:
        '200':
          description: |
            returns the root directory for the requested project.
            returned object additionally contains fields 'directories' and 'files', which contain the child directory and file objects of the root directory, similar to what API /directories/{PID}/files does.
        '400':
          description: bad parameters, details in body
        '404':
          description: directory not found
      tags:
        - File API



# Data Catalog API
  /datacatalogs:
    get:
      summary: "list of data catalogs"
      responses:
        "200":
          description: return list of file data catalogs
      tags:
        - Data Catalog API
    post:
      summary: create new data catalog
      description: |
        # catalog_json read-only fields
        - identifier
      consumes:
        - application/json
      parameters:
      - in: "body"
        name: "body"
        description: "Object or a list of objects to create."
        required: true
        schema:
          $ref: '#/definitions/DataCatalog'
      responses:
        '201':
          description: new data catalog created
          schema:
            $ref: '#/definitions/DataCatalog'
        '401':
          description: Unauthorized. Reserved for admins only
      tags:
        - Data Catalog API
  /datacatalogs/{PID}:
    get:
      summary: get data catalog metadata
      parameters:
        - name: PID
          in: path
          description: Persistent ID of the resource OR the internal pk
          required: true
          type: string
      responses:
        '200':
          description: return data catalog metadata
          schema:
            $ref: '#/definitions/DataCatalog'
        '404':
          description: not found
      tags:
        - Data Catalog API
    put:
      summary: replace data catalog metadata
      description: |
        # catalog_json read-only fields
        - identifier
      parameters:
        - name: PID
          in: path
          description: Persistent ID of the resource OR the internal pk
          required: true
          type: string
        - in: "body"
          name: "body"
          description: "Object to update the resource with"
          required: true
          schema:
            $ref: '#/definitions/DataCatalog'
      responses:
        '200':
          description: successful operation. modified content returned
        '400':
          description: parameters contained errors, response includes details
        '401':
          description: Unauthorized. Reserved for admins only
      tags:
        - Data Catalog API
    patch:
      summary: replace part of catalog metadata
      description: |
        # catalog_json read-only fields
        - identifier
      parameters:
        - in: "body"
          name: "body"
          description: "(Partial) Object to update the resource with"
          required: true
          schema:
            $ref: '#/definitions/DataCatalog'
        - name: PID
          in: path
          description: Persistent ID of the resource OR the internal pk
          required: true
          type: string
      responses:
        '200':
          description: successful operation, full content returned
          schema:
            $ref: '#/definitions/DataCatalog'
        '400':
          description: parameters contained errors, response includes details
      tags:
        - Data Catalog API
  /datacatalogs/{PID}/exists:
    get:
      summary: indicate whether given data catalog exists
      parameters:
        - name: PID
          in: path
          description: Persistent ID of the resource OR the internal pk
          required: true
          type: string
      responses:
        '200':
          description: return true
        '404':
          description: return false
      tags:
        - Data Catalog API







# Dataset API
  /datasets:
    # some of the parameters and returned fields are for TPAS usage only
    get:
      summary: "list datasets"
      parameters:
        - name: latest
          in: query
          description: only return latest versions
          required: false
          type: boolean
        - name: owner_id
          in: query
          description: id of the person who owns the record in metax
          required: false
          type: string
        - name: user_created
          in: query
          description: id of the person who created the record in metax
          required: false
          type: string
        - name: curator
          in: query
          description: curator identifier (field research_dataset-> curator-> identifier)
          required: false
          type: string
        - name: state
          in: query
          description: TPAS state (field preservation_state). multiple states using OR-logic are queriable in the same request, e.g. state=5,6. see valid values from http://iow.csc.fi/model/mrd/CatalogRecord/ field preservation_state
          required: false
          type: string
        - name: offset
          in: query
          description: offset for paging
          required: false
          type: integer
        - name: limit
          in: query
          description: limit for paging
          required: false
          type: integer
          default: 10
      responses:
        "200":
          description: successful operation, returns a list of datasets containing full dataset objects including their data catalog and contract information. when using query parameters, search result can be an empty list.
          schema:
            $ref: '#/definitions/CatalogRecord'
      tags:
        - Dataset API
    post:
      summary: create new dataset metadata
      description: |
        # research_dataset identifiers
        The field <b>urn_identifier</b> is always generated for the user. <b>preferred_identifier</b> can be provided by the user, and if omitted, the value of <b>urn_identifier</b> is copied to it.
        # research_dataset read-only fields
        - urn_identifier
        - total_byte_size (generated from files in the db according to files listed in the given dataset)
      consumes:
        - application/json
      parameters:
      - in: "body"
        name: "body"
        description: "Object or a list of objects to create."
        required: true
        schema:
          $ref: '#/definitions/CatalogRecord'
      responses:
        '201':
          description: Returns the created object, or if a list was given, a list of objects and errors.
        '400':
          description: parameters contained errors, response includes details.
      tags:
        - Dataset API
    put:
      summary: bulk update
      consumes:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          description: "A list of objects to update."
          required: true
      responses:
        '200':
          description: Sucessful operation. Return values include a list of errors, if any.
        '400':
          description: All updates failed. A list of errors is returned.
      tags:
        - Dataset API
    patch:
      summary: bulk update partial
      description: |
        The payload must include a field that can be used to identify the resource being updated. Acceptable identifier fields are: <b>id, research_dataset->urn_identifier</b>
      consumes:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          description: "A list of (partial) objects to update."
          required: true
      responses:
        '200':
          description: Some or all objects were updated. Return values contain list of full updated objects, and may include a list of errors.
        '400':
          description: All updates failed. A list of errors is returned.
      tags:
        - Dataset API
  /datasets/urn_identifiers:
    get:
      summary: "list all dataset urn identifiers"
      parameters:
        - name: latest
          in: query
          description: only return latest versions
          required: false
          type: boolean
        - name: owner_id
          in: query
          description: id of the person who owns the record in metax
          required: false
          type: string
        - name: user_created
          in: query
          description: id of the person who created the record in metax
          required: false
          type: string
        - name: curator
          in: query
          description: curator identifier (field research_dataset-> curator-> identifier)
          required: false
          type: string
        - name: state
          in: query
          description: TPAS state (field preservation_state). multiple states using OR-logic are queriable in the same request, e.g. state=5,6. see valid values from http://iow.csc.fi/model/mrd/CatalogRecord/ field preservation_state
          required: false
          type: string
      responses:
        "200":
          description: successful operation, returns a list of all dataset urn identifiers.
      tags:
        - Dataset API
  /datasets/{PID}:
    get:
      summary: get dataset metadata
      parameters:
        - name: PID
          in: path
          description: Persistent ID of dataset OR the internal pk
          required: true
          type: string
        - name: dataset_format
          in: query
          description: Name of the format the dataset should be returned in. <b>Note:</b> Using this parameter causes the api to return only the field research_dataset, transformed to the requested format.
          required: false
          type: string
        - name: file_details
          in: query
          description: |
            Populate individual research_dataset.files and directories objects with their corresponding db object details.
            The details can be found behind the appended key 'details' that is placed into each file and directory in the dataset.
            Additionally total byte size and total file counts are calculated for directories, and are placed into fields
            byte_size and file_count in each directory's details as extra information.
          required: false
          type: boolean
      responses:
        '200':
          description: return dataset metadata
          schema:
            $ref: '#/definitions/CatalogRecord'
        '404':
          description: not found
      tags:
        - Dataset API
    put:
      summary: replace dataset metadata
      description: |
        # research_dataset read-only fields
        - urn_identifier
        - total_byte_size (generated from files in the db according to files listed in the given dataset)
      parameters:
        - in: "body"
          name: "body"
          description: "Object to update the resource with"
          required: true
          schema:
            $ref: '#/definitions/CatalogRecord'
        - name: PID
          in: path
          description: Persistent ID of dataset OR the internal pk
          required: true
          type: string
      responses:
        '200':
          description: successful operation. modified content returned
        '400':
          description: parameters contained errors, response includes details
      tags:
        - Dataset API
    patch:
      summary: replace part of dataset metadata
      description: |
        # research_dataset read-only fields
        - urn_identifier
        - total_byte_size (generated from files in the db according to files listed in the given dataset)
      parameters:
        - in: "body"
          name: "body"
          description: "(Partial) Object to update the resource with"
          required: true
          schema:
            $ref: '#/definitions/CatalogRecord'
        - name: PID
          in: path
          description: Persistent ID of dataset OR the internal pk
          required: true
          type: string
      responses:
        '200':
          description: successful operation, full content returned
          schema:
            $ref: '#/definitions/CatalogRecord'
        '400':
          description: parameters contained errors, response includes details
      tags:
        - Dataset API
  /datasets/{PID}/exists:
    get:
      summary: indicate whether given dataset exists
      parameters:
        - name: PID
          in: path
          description: Persistent ID of dataset OR the internal pk
          required: true
          type: string
      responses:
        '200':
          description: return true
        '404':
          description: return false
      tags:
        - Dataset API
  /datasets/{PID}/statistics:
    get:
      summary: get statistics for dataset
      parameters:
        - name: PID
          in: path
          description: Persistent ID of dataset OR the internal pk
          required: true
          type: string
      responses:
        '200':
          description: successful operation, return statistics (e.g. number of downloads, number of permissions asked, number of permissions granted, dissemination service used)
      tags:
        - Dataset API (not implemented)
  /datasets/{PID}/files:
    get:
      summary: get list of files in a dataset
      parameters:
        - name: PID
          in: path
          description: Persistent ID of dataset OR the internal pk
          required: true
          type: string
      responses:
        '200':
          description: successful operation, return list of full files metadata
      tags:
        - Dataset API
  /datasets/{PID}/feedback:
    get:
      summary: get feedback (comments and ratings) for a dataset
      parameters:
        - name: PID
          in: path
          description: Persistent ID of dataset OR the internal pk
          required: true
          type: string
        - name: offset
          in: query
          description: offset for paging
          required: false
          type: integer
        - name: limit
          in: query
          description: limit for paging
          required: false
          type: integer
          default: 10
      responses:
        '200':
          description: successful operation, return feedback objects
      tags:
        - Dataset API (not implemented)
    post:
      summary: create new feedback for dataset
      parameters:
        - name: PID
          in: path
          description: Persistent ID of dataset OR the internal pk
          required: true
          type: string
      consumes:
        - application/json
      responses:
        '201':
          description: new feedback created, return Location with the new URL containing feedback ID
      tags:
        - Dataset API (not implemented)
  /datasets/{PID}/feedback/{ID}:
    get:
      summary: get a single feedback object for a dataset
      parameters:
        - name: PID
          in: path
          description: Persistent ID of dataset OR the internal pk
          required: true
          type: string
        - name: ID
          in: path
          description: ID of feedback object
          required: true
          type: string
      responses:
        '200':
          description: successful operation, return feedback object
      tags:
        - Dataset API (not implemented)
  /datasets/{PID}/usage:
    get:
      summary: get usages for a dataset
      parameters:
        - name: PID
          in: path
          description: Persistent ID of dataset OR the internal pk
          required: true
          type: string
        - name: offset
          in: query
          description: offset for paging
          required: false
          type: integer
        - name: limit
          in: query
          description: limit for paging
          required: false
          type: integer
          default: 10
      responses:
        '200':
          description: successful operation, return usage objects
      tags:
        - Dataset API (not implemented)
    post:
      summary: create new usage for dataset
      parameters:
        - name: PID
          in: path
          description: Persistent ID of dataset OR the internal pk
          required: true
          type: string
      consumes:
        - application/json
      responses:
        '201':
          description: new usage created, return Location with the new URL containing usage ID
      tags:
        - Dataset API (not implemented)
  /datasets/{PID}/usage/{ID}:
    get:
      summary: get a single usage object for a dataset
      parameters:
        - name: PID
          in: path
          description: Persistent ID of dataset OR the internal pk
          required: true
          type: string
        - name: ID
          in: path
          description: ID of usage object
          required: true
          type: string
      responses:
        '200':
          description: successful operation, return usage object
      tags:
        - Dataset API (not implemented)


# Contract API
  /contracts:
    get:
      summary: "list contracts"
      parameters:
        - name: organization
          in: query
          description: organization ID (field contract_json-> organization-> organization_identifier)
          required: false
          type: string
        - name: offset
          in: query
          description: offset for paging
          required: false
          type: integer
        - name: limit
          in: query
          description: limit for paging
          required: false
          type: integer
      responses:
        "200":
          description: successful operation, return list of contracts
      tags:
        - Contract API
    post:
      summary: create new contract metadata
      consumes:
        - application/json
      responses:
        '201':
          description: new contract metadata created, returns the created object, or if a list was given, a list of objects
        '400':
          description: parameters contained errors, response includes details
      tags:
        - Contract API
  /contracts/{PID}:
    get:
      summary: get contract metadata
      parameters:
        - name: PID
          in: path
          description: Persistent ID of contract OR the internal pk
          required: true
          type: string
      responses:
        '200':
          description: return contract metadata
        '404':
          description: not found
      tags:
        - Contract API
    put:
      summary: replace contract metadata
      parameters:
        - name: PID
          in: path
          description: Persistent ID of contract OR the internal pk
          required: true
          type: string
      responses:
        '200':
          description: successful operation. modified content returned
        '400':
          description: parameters contained errors, response includes details
      tags:
        - Contract API
    patch:
      summary: replace part of contract metadata
      parameters:
        - name: PID
          in: path
          description: Persistent ID of contract OR the internal pk
          required: true
          type: string
      responses:
        '200':
          description: successful operation, full content returned
        '400':
          description: parameters contained errors, response includes details
      tags:
        - Contract API


# Schema API
  /schemas:
    get:
      summary: "list schemas"
      responses:
        '200':
          description: successful operation, return list of schema names
      tags:
        - Schema API
  /schemas/{name}:
    get:
      summary: get schema content
      parameters:
        - name: name
          in: path
          description: name of the schema to be retrieved
          required: true
          type: string
      responses:
        '200':
          description: return JSON schema
        '404':
          description: not found
      tags:
        - Schema API

              
definitions:
  CatalogRecord:
    $ref: 'https://raw.githubusercontent.com/CSCfi/metax-api/test/src/metax_api/api/rest/base/api_schemas/catalogrecord.json#/definitions/CatalogRecord'
  DataCatalog:
    $ref: 'https://raw.githubusercontent.com/CSCfi/metax-api/test/src/metax_api/api/rest/base/api_schemas/datacatalog.json#/definitions/Catalog'
  File:
    $ref: 'https://raw.githubusercontent.com/CSCfi/metax-api/test/src/metax_api/api/rest/base/api_schemas/file.json#/definitions/File'
  Directory:
    $ref: 'https://raw.githubusercontent.com/CSCfi/metax-api/test/src/metax_api/api/rest/base/api_schemas/file.json#/definitions/Directory'
