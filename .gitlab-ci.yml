workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(demo|stable|staging|test)$/'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

stages:
  - deploy
  - test
  - clean_test
  - clean_env
  - update
  - clean_build

deploy:
  stage: deploy
  environment: $CI_COMMIT_REF_NAME
  script:
    - ansible-playbook -i $ANSIBLE_INVENTORY $DEPLOY_PLAYBOOK -e "build_id=$CI_COMMIT_SHORT_SHA repo_version=$CI_COMMIT_REF_NAME"

integration_test:
  stage: test
  environment: $CI_COMMIT_REF_NAME
  script:
    - ansible-playbook -i $ANSIBLE_INVENTORY $TEST_PLAYBOOK -e "build_id=$CI_COMMIT_SHORT_SHA"

clean_test:
  stage: clean_test
  environment:
    name: $CI_COMMIT_REF_NAME
    on_stop: clean_gitlab_env
  script:
    - ansible-playbook -i $ANSIBLE_INVENTORY $DELETE_PLAYBOOK -e "build_id=$CI_COMMIT_SHORT_SHA"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - when: on_failure

clean_gitlab_env:
  stage: clean_env
  variables:
    GIT_STRATEGY: none
  environment:
    name: $CI_COMMIT_REF_NAME
    action: stop
  script:
    - echo "Cleaning deleted branches from environments"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
    - when: never

update_proxy:
  stage: update
  environment: $CI_COMMIT_REF_NAME
  script:
    - ansible-playbook -i $ANSIBLE_INVENTORY $UPDATE_PROXY_PLAYBOOK -e "build_id=$CI_COMMIT_SHORT_SHA"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always

clean_previous_build:
  stage: clean_build
  environment: $CI_COMMIT_REF_NAME
  script:
    - ansible-playbook -i $ANSIBLE_INVENTORY $DELETE_PLAYBOOK -e "build_id=${CI_COMMIT_BEFORE_SHA:0:8}"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always
